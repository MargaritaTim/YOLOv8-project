# -*- coding: utf-8 -*-
"""YOLOv8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vxoury3BdqsrMXgpxX5TE9MW6HKVwKUC

# **Import & Mount**
"""

# pip install ultralytics
import image_properties_functions as image_utils
import functions as utils

import os
from os import listdir

import random
import shutil
import struct

import numpy as np
import pandas as pd
import re

from matplotlib import pyplot
import cv2
# from google.colab.patches import cv2_imshow

import xml.etree.ElementTree as ET

import torch
import torchvision.models as models

import locale

from ultralytics import YOLO

# from google.colab import drive
# drive.mount('/content/drive')

torch.manual_seed(0)

"""# **YOLOv8 model**

## 1 Create YOLOv8 model

source: https://docs.ultralytics.com/,
coco dataset: https://www.kaggle.com/datasets/ultralytics/coco128?resource=download
"""

locale.getpreferredencoding = lambda: "UTF-8"

# !pip install pyyaml h5py

# Load a model
# model = YOLO('yolov8n.yaml')  # build a new model from YAML
# model = YOLO('yolov8n.pt')  # load a pretrained model (recommended for training)
# model = YOLO('yolov8n.yaml').load('yolov8n.pt')  # build from YAML and transfer weights

# Train the model
# model.train(data='coco128.yaml', epochs=10, imgsz=640)

"""## 2 Save the trained model"""

# model.export()  # export the model

"""## 3 Load trained model & example"""

# source: https://docs.ultralytics.com/modes/track/#available-trackers
model_trained = YOLO(utils.repo_image_path('YOLOv8-project/best.torchscript'), task='detect') # change path according to relevant one

image_path = utils.repo_image_path('YOLOv8-project/Kangaroos/00050.jpg')

utils.predict_plot_image(image_path,model_trained)

"""# **Predict COCO128**"""

coco128_path = utils.repo_image_path('YOLOv8-project/coco128/image')

coco_annos_dir = utils.repo_image_path('YOLOv8-project/coco128/annotations')

df_coco, coco_iou = utils.pipeline('coco128', coco128_path, coco_annos_dir, 'jpg', model_trained)

print(df_coco)

print(coco_iou)

"""# **Predict Mouse Dataset**"""

mouse_path = '/content/drive/MyDrive/Image processing projects/Mouse'

mouse_annos_dir = '/content/drive/MyDrive/Image processing projects/Mouse/annotations'

df_mouse, mouse_iou = utils.pipeline('mouse', mouse_path, mouse_annos_dir, 'jpg', model_trained)

mouse_iou

"""Print images with low score"""

def print_image(image, data_set_name,):
  path = f"/content/drive/MyDrive/Image processing projects/{data_set_name}/{image}"
  utils.predict_plot_image(path)

# finish function and move to functions.py
def print_low_score_images(df_low, dataset_name):
  image_list = df_low.index.values.tolist()
  for image in image_list:
    print_image(image, dataset_name)


df_mouse_low_score = df_mouse[(df_mouse["avg_score"] < 0.5)].sort_values(by=['avg_score'])

#df_mouse_low_score

image_list = df_mouse_low_score.index.values.tolist()

#print_image("035ea087488d912d.jpg", "Mouse")

for image in image_list:
  print_image(image, "Mouse")

"""Print images with high score"""

df_mouse_high_score = df_mouse[(df_mouse["avg_score"] > 0.8)].sort_values(by=['avg_score'])

image_list = df_mouse_high_score.index.values.tolist()

for image in image_list:
  print_image(image, "Mouse")

"""# **Predict Zebras Dataset**"""

zebra_image_path = '/content/drive/MyDrive/Image processing projects/Zebra'

zebra_annos_dir = '/content/drive/MyDrive/Image processing projects/Zebra/annotations'

df_zebra, zebra_iou = utils.pipeline('zebra', zebra_image_path, zebra_annos_dir, 'jpg', model_trained)

zebra_iou

"""Print low score images"""

df_zebra_low_score = df_zebra[(df_zebra["avg_score"] < 0.5)].sort_values(by=['avg_score'])

#df_zebra_low_score

image_list = df_zebra_low_score.index.values.tolist()

for image in image_list:
  print_image(image, "Zebra")

"""Print high score images"""

df_zebra_low_score = df_zebra[(df_zebra["avg_score"] > 0.8)].sort_values(by=['avg_score'])

image_list = df_zebra_low_score.index.values.tolist()

for image in image_list:
  print_image(image, "Zebra")

"""# **Predict Windows Dataset**"""

windows_image_path = '/content/drive/MyDrive/Image processing projects/Street windows'

windows_annos_dir = '/content/drive/MyDrive/Image processing projects/Street windows/annotations'

df_windows, windows_iou = utils.pipeline('windows', windows_image_path, windows_annos_dir, 'jpg', model_trained, '.xml')

#df_windows

windows_iou

df_windows_low_score = df_windows[(df_windows["avg_score"] < 0.5)].sort_values(by=['avg_score'])

#df_windows_low_score

image_list = df_windows_low_score.index.values.tolist()

for image in image_list:
  print_image(image, "Street windows")

# try bad example
window_example = '/content/drive/MyDrive/Image processing projects/Street windows/000003.jpg'
utils.predict_plot_image(window_example)

# Try good axample
window_example2 = '/content/drive/MyDrive/Image processing projects/Street windows/000004.jpg'
utils.predict_plot_image(window_example2)

"""# **Predict Kangaroos Dataset**"""

kangaroos_image_path = '/content/drive/MyDrive/Image processing projects/Kangaroos'

kangaroos_annos_dir = '/content/drive/MyDrive/Image processing projects/Kangaroos/annots'

df_kangaroos, kangaroos_iou = utils.pipeline('kangaroos', kangaroos_image_path, kangaroos_annos_dir,'jpg', model_trained, '.xml')

#df_kangaroos

kangaroos_iou

df_kangaroos_low_score = df_kangaroos[(df_kangaroos["avg_score"] < 0.5)].sort_values(by=['avg_score'])

image_list = df_kangaroos_low_score.index.values.tolist()

for image in image_list:
  print_image(image, "Kangaroos")

"""# **Predict Face mask Dataset**"""

face_mask_image_path = '/content/drive/MyDrive/Image processing projects/Face mask dataset'

face_mask_annos_dir = '/content/drive/MyDrive/Image processing projects/Face mask dataset/annotations'

df_face_mask, face_mask_iou = utils.pipeline('face_mask', face_mask_image_path, face_mask_annos_dir, 'jpg', model_trained, '.xml')

face_mask_iou

df_face_mask_low_score = df_face_mask[(df_face_mask["avg_score"] < 0.5)].sort_values(by=['avg_score'])

image_list = df_face_mask_low_score.index.values.tolist()

for image in image_list:
  print_image(image, "Face mask dataset")

"""# **Predict B&W mask Dataset**"""
